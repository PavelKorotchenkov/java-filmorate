DROP TABLE IF EXISTS users, mpa, films, genre, film_genre, user_film_like, friendship, reviews;

CREATE TABLE IF NOT EXISTS users
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    varchar(255) UNIQUE,
    name     varchar(255),
    login    varchar(255) UNIQUE,
    birthday timestamp
);

CREATE TABLE IF NOT EXISTS mpa
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(55)
);

CREATE TABLE IF NOT EXISTS films
(
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        varchar(255),
    description varchar(255),
    releaseDate timestamp,
    duration    integer,
    mpa_id      integer,
    FOREIGN KEY (mpa_id) REFERENCES mpa (id)
);

CREATE TABLE IF NOT EXISTS genre
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(55) unique
);

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id  integer,
    genre_id integer,
    FOREIGN KEY (film_id) REFERENCES films (id),
    FOREIGN KEY (genre_id) REFERENCES genre (id)
);

CREATE TABLE IF NOT EXISTS user_film_like
(
    user_id    integer,
    film_id    integer,
    created_at timestamp,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (film_id) REFERENCES films (id)
);


CREATE TABLE IF NOT EXISTS friendship
(
    user_id           integer,
    friend_id         integer,
    friendship_status boolean,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (friend_id) REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS reviews (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content varchar(255),
    isPositive boolean,
    user_id integer,
    film_id integer,
    userful integer,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (film_id) REFERENCES films(id)
);
